"use client";
import Image from "next/image";
import React, { useState } from "react";
import roadMapOval from "@assets/images/roadMapOval.webp";
import mobileOvalImage from "@assets/images/mobileOvalImage.webp";
import phase1 from "@assets/images/phase1.webp";
import mobilePhase1 from "@assets/images/mobilePhase1.webp";
import phase2 from "@assets/images/phase2.webp";
import mobilePhase2 from "@assets/images/mobilePhase2.webp";
import phase3 from "@assets/images/phase3.webp";
import mobilePhase3 from "@assets/images/mobilePhase3.webp";
import phase4 from "@assets/images/phase4.webp";
import mobilePhase4 from "@assets/images/mobilePhase4.webp";
import phase5 from "@assets/images/phase5.webp";
import mobilePhase5 from "@assets/images/mobilePhase5.webp";
import { AnimatePresence, motion } from "framer-motion";

const RoadMap = () => {
  const [hovered, setHovered] = useState("");

  return (
    <div className="py-12 bg-gray-200" id="roadmap">
      <div className="container mx-auto  ">
        <motion.div
          initial={{ opacity: 0 }}
          whileInView={{ opacity: 1 }}
          viewport={{ once: true }}
          transition={{ delay: 0.4, duration: 0.3 }}
          className="bg-whiteLinear lg:rounded-3xl py-8 min-h-[975px]"
        >
          <motion.h1
            initial={{ x: -100, opacity: 0 }}
            whileInView={{ x: 0, opacity: 1 }}
            viewport={{ once: true }}
            transition={{ delay: 0.6, duration: 0.5 }}
            style={{ textTransform: "uppercase" }}
            className="text-3xl sm:text-5xl border-b-2 max-lg:text-center border-[#1A1C1F] pb-7 px-20 tracking-wide"
          >
            TNET Detailed <br className="max-sm:hidden " />
            Roadmap
          </motion.h1>

          <motion.div
            initial={{ y: -100, opacity: 0 }}
            whileInView={{ y: 0, opacity: 1 }}
            viewport={{ once: true }}
            transition={{ duration: 0.3, delay: 0.9 }}
            className="px-20 mt-2 "
          >
            <div className="flex flex-row lg:justify-start items-start gap-4 lg:gap-64 ">
              <p className="text-[#1A1C1F]">04</p>
              <p className="text-[#1A1C1F] uppercase">ROAD MAP</p>
            </div>
          </motion.div>

          {/* for Desktop  */}
          <motion.div
            initial={{ scale: 0 }}
            whileInView={{ scale: 1 }}
            viewport={{ once: true }}
            transition={{ duration: 0.3, delay: 0.6 }}
            className="hidden sm:flex flex-col  items-center justify-center min-h-[600px] pt-24  "
          >
            <div className="relative   " onMouseLeave={() => setHovered("")}>
              <Image src={roadMapOval} alt="Road Map Oval" className=" " />

              {/* phase 1 */}
              <div
                className="absolute bottom-7 left-[60px] overflow-clip"
                onMouseEnter={() => setHovered("phase1")}
                onMouseLeave={() => setHovered("")}
              >
                <AnimatePresence mode="wait" initial={false}>
                  {hovered === "phase1" ? (
                    <motion.svg
                      key={0}
                      initial={{ y: "70%" }}
                      animate={{ y: 0 }}
                      exit={{ y: "70%" }}
                      transition={{ duration: 1 }}
                      width="16"
                      height="385"
                      viewBox="0 0 16 385"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M8 384.5L7.99999 88.5001"
                        stroke="#8A8989"
                        stroke-width="2"
                      />

                      <rect
                        x="0.496094"
                        y="86.5001"
                        width="10.0052"
                        height="15.0078"
                        transform="rotate(-90 0.496094 86.5001)"
                        fill="#8A8989"
                      />
                      <path
                        d="M9.97373 70.913H14.4961V72.6339H0.488782L0.488782 66.2706C0.488782 59.8272 9.95372 59.8272 9.97373 66.2706V70.913ZM8.35289 66.2706C8.35289 62.1484 2.10963 62.1484 2.10963 66.2706V70.913H8.35289V66.2706ZM0.488782 57.6942H0.508792H6.25179C4.95111 56.8538 4.51088 55.5331 4.49087 54.2724C4.49087 51.491 6.33183 50.1303 9.05325 50.1303H14.4961V51.7511H9.07326C7.13225 51.7511 6.03168 52.7516 6.03168 54.5526C6.03168 56.3535 7.45242 57.6742 9.25336 57.6742H14.4961V59.3151H0.488782L0.488782 57.6942ZM14.4961 39.1133L14.5361 39.1533L12.7352 39.1933C14.0959 39.9737 14.7362 41.4745 14.7362 42.8352C14.7362 45.6767 12.7752 47.8979 9.55351 47.8979C6.35184 47.8979 4.43084 45.6367 4.45085 42.8152C4.45085 41.3344 5.13121 39.8737 6.41187 39.1533L4.61093 39.1333V37.5325H14.4961V39.1133ZM5.99165 42.7352L6.01166 42.7552C6.01166 44.7162 7.4124 46.297 9.61354 46.297C11.8147 46.297 13.2354 44.7162 13.2354 42.7552C13.2354 37.9927 5.99165 37.9927 5.99165 42.7352ZM6.79207 28.1732L6.81208 28.1932C6.03168 29.0537 5.85158 29.9541 5.85158 30.9747C5.83157 32.3354 6.31182 33.4359 7.29233 33.4159C8.31287 33.3959 8.61302 32.1953 8.7531 30.9546C8.97321 29.1537 9.3334 26.7525 11.7747 26.7925C13.7557 26.8325 14.7362 28.7135 14.7362 30.9346C14.7362 32.5955 14.276 34.2364 12.8752 35.3569L11.7347 34.4165C12.8152 33.536 13.2554 32.1153 13.2554 30.8946C13.2554 29.8141 12.9153 28.4333 11.7146 28.3933C10.6341 28.3733 10.3139 29.5339 10.1338 31.0547C9.89369 32.9557 9.39343 34.9968 7.29233 34.9968C5.19124 35.0168 4.37081 32.8957 4.39082 30.9947C4.39082 29.5139 4.75101 28.2933 5.71151 27.2327L6.79207 28.1732ZM12.9153 15.6862V15.7062C14.0959 16.7067 14.6762 18.4276 14.6762 19.9684C14.6762 23.03 12.6551 25.1712 9.51349 25.1712C6.53194 25.1712 4.39082 23.03 4.39082 20.0485C4.39082 17.0269 6.25179 14.7257 10.1938 15.1059V23.5103C12.0148 23.3302 13.1554 21.8294 13.1554 19.9284C13.1554 18.8078 12.7152 17.4471 11.9147 16.7868L12.9153 15.6862ZM8.81313 16.6667H8.83314C6.91214 16.7468 5.87159 18.0675 5.87159 20.0085C5.87159 21.7294 6.91214 23.2301 8.81313 23.5103V16.6667ZM13.0353 8.16635V5.56499H2.66992L3.33027 8.02628H1.72943L0.488782 3.82408H13.0353V1.28276H14.4961V8.16635H13.0353Z"
                        fill="black"
                      />
                    </motion.svg>
                  ) : (
                    <Image src={phase1} alt="Phase 1" />
                  )}
                </AnimatePresence>
              </div>
              {/* phase 1 */}

              {/* phase 2 */}
              <div
                className="absolute bottom-3 left-[140px] overflow-clip"
                onMouseEnter={() => setHovered("phase2")}
                onMouseLeave={() => setHovered("")}
              >
                <AnimatePresence mode="wait" initial={false}>
                  {hovered === "phase2" ? (
                    <motion.svg
                      key={0}
                      initial={{ y: "63.6%" }}
                      animate={{ y: 0 }}
                      exit={{ y: "63.6%" }}
                      transition={{ duration: 1 }}
                      width="16"
                      height="390"
                      viewBox="0 0 16 390"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M8.50391 390.005L8.50389 93.0052"
                        stroke="#8A8989"
                        stroke-width="2"
                      />
                      <rect
                        x="1"
                        y="92.0052"
                        width="10.0052"
                        height="15.0078"
                        transform="rotate(-90 1 92.0052)"
                        fill="#8A8989"
                      />
                      <path
                        d="M10.4776 75.4181H15V77.139H0.992688L0.992688 70.7757C0.992688 64.3323 10.4576 64.3323 10.4776 70.7757V75.4181ZM8.85679 70.7757C8.85679 66.6536 2.61353 66.6536 2.61353 70.7757V75.4181H8.85679V70.7757ZM0.992688 62.1994H1.0127H6.7557C5.45502 61.3589 5.01479 60.0382 4.99478 58.7776C4.99478 55.9961 6.83574 54.6354 9.55716 54.6354H15V56.2563H9.57717C7.63616 56.2563 6.53558 57.2568 6.53558 59.0577C6.53558 60.8587 7.95632 62.1793 9.75726 62.1793H15V63.8202H0.992688V62.1994ZM15 43.6184L15.04 43.6584L13.2391 43.6984C14.5998 44.4789 15.2401 45.9796 15.2401 47.3403C15.2401 50.1818 13.2791 52.403 10.0574 52.403C6.85575 52.403 4.93475 50.1418 4.95476 47.3203C4.95476 45.8396 5.63511 44.3788 6.91578 43.6584L5.11484 43.6384V42.0376H15V43.6184ZM6.49556 47.2403L6.51557 47.2603C6.51557 49.2213 7.9163 50.8022 10.1175 50.8022C12.3186 50.8022 13.7393 49.2213 13.7393 47.2603C13.7393 42.4978 6.49556 42.4978 6.49556 47.2403ZM7.29598 32.6783L7.31599 32.6983C6.53558 33.5588 6.35549 34.4593 6.35549 35.4798C6.33548 36.8405 6.81573 37.9411 7.79624 37.9211C8.81677 37.901 9.11693 36.7004 9.257 35.4598C9.47712 33.6588 9.8373 31.2576 12.2786 31.2976C14.2596 31.3376 15.2401 33.2186 15.2401 35.4398C15.2401 37.1006 14.7799 38.7415 13.3792 39.8621L12.2386 38.9216C13.3191 38.0411 13.7594 36.6204 13.7594 35.3997C13.7594 34.3192 13.4192 32.9385 12.2185 32.8984C11.138 32.8784 10.8178 34.039 10.6377 35.5598C10.3976 37.4608 9.89734 39.5019 7.79624 39.5019C5.69514 39.5219 4.87471 37.4008 4.89473 35.4998C4.89473 34.019 5.25491 32.7984 6.21541 31.7378L7.29598 32.6783ZM13.4192 20.1913V20.2113C14.5998 21.2119 15.1801 22.9328 15.1801 24.4736C15.1801 27.5352 13.159 29.6763 10.0174 29.6763C7.03584 29.6763 4.89473 27.5352 4.89473 24.5536C4.89473 21.532 6.7557 19.2308 10.6978 19.611V28.0154C12.5187 27.8353 13.6593 26.3345 13.6593 24.4336C13.6593 23.313 13.2191 21.9523 12.4187 21.2919L13.4192 20.1913ZM9.31703 21.1718H9.33704C7.41604 21.2519 6.3755 22.5726 6.3755 24.5136C6.3755 26.2345 7.41604 27.7353 9.31703 28.0154V21.1718ZM4.87471 10.6104V12.3513C1.75308 12.2312 0.832605 9.38976 0.832605 6.80842C0.832605 4.20706 1.89316 1.4056 5.01479 1.4056C8.19645 1.4056 9.19697 4.18705 9.19697 6.88846C9.21698 8.52932 9.61719 10.6904 11.6182 10.6904H13.3391V1.46563H15V12.4514H11.6182C8.45658 12.4514 7.57612 9.56986 7.57612 6.90847C7.57612 5.4277 7.05585 3.12649 5.0348 3.12649C2.99373 3.12649 2.39342 5.02749 2.3534 6.80842C2.3534 8.52932 2.95371 10.5904 4.87471 10.6104Z"
                        fill="black"
                      />
                    </motion.svg>
                  ) : (
                    <Image src={phase2} alt="Phase 1" />
                  )}
                </AnimatePresence>
              </div>
              {/* phase 2 */}

              {/* phase 3 */}
              <div
                className="absolute bottom-0.5 left-[250px] overflow-clip"
                onMouseEnter={() => setHovered("phase3")}
                onMouseLeave={() => setHovered("")}
              >
                <AnimatePresence mode="wait" initial={false}>
                  {hovered === "phase3" ? (
                    <motion.svg
                      key={0}
                      initial={{ y: "59.5%" }}
                      animate={{ y: 0 }}
                      exit={{ y: "59.5%" }}
                      transition={{ duration: 1 }}
                      width="16"
                      height="390"
                      viewBox="0 0 16 390"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M8.50391 390.005L8.50389 94.0052"
                        stroke="#8A8989"
                        stroke-width="2"
                      />
                      <rect
                        x="1"
                        y="92.0052"
                        width="10.0052"
                        height="15.0078"
                        transform="rotate(-90 1 92.0052)"
                        fill="#8A8989"
                      />
                      <path
                        d="M10.4776 75.4181H15V77.139H0.992688L0.992688 70.7757C0.992688 64.3323 10.4576 64.3323 10.4776 70.7757V75.4181ZM8.85679 70.7757C8.85679 66.6536 2.61353 66.6536 2.61353 70.7757V75.4181H8.85679V70.7757ZM0.992688 62.1994H1.0127H6.7557C5.45502 61.3589 5.01479 60.0382 4.99478 58.7776C4.99478 55.9961 6.83574 54.6354 9.55716 54.6354H15V56.2563H9.57717C7.63616 56.2563 6.53558 57.2568 6.53558 59.0577C6.53558 60.8587 7.95632 62.1793 9.75726 62.1793H15V63.8202H0.992688V62.1994ZM15 43.6184L15.04 43.6584L13.2391 43.6984C14.5998 44.4789 15.2401 45.9796 15.2401 47.3403C15.2401 50.1818 13.2791 52.403 10.0574 52.403C6.85575 52.403 4.93475 50.1418 4.95476 47.3203C4.95476 45.8396 5.63511 44.3788 6.91578 43.6584L5.11484 43.6384V42.0376H15V43.6184ZM6.49556 47.2403L6.51557 47.2603C6.51557 49.2213 7.9163 50.8022 10.1175 50.8022C12.3186 50.8022 13.7393 49.2213 13.7393 47.2603C13.7393 42.4978 6.49556 42.4978 6.49556 47.2403ZM7.29598 32.6783L7.31599 32.6983C6.53558 33.5588 6.35549 34.4593 6.35549 35.4798C6.33548 36.8405 6.81573 37.9411 7.79624 37.9211C8.81677 37.901 9.11693 36.7004 9.257 35.4598C9.47712 33.6588 9.8373 31.2576 12.2786 31.2976C14.2596 31.3376 15.2401 33.2186 15.2401 35.4398C15.2401 37.1006 14.7799 38.7415 13.3792 39.8621L12.2386 38.9216C13.3191 38.0411 13.7594 36.6204 13.7594 35.3997C13.7594 34.3192 13.4192 32.9385 12.2185 32.8984C11.138 32.8784 10.8178 34.039 10.6377 35.5598C10.3976 37.4608 9.89734 39.5019 7.79624 39.5019C5.69514 39.5219 4.87471 37.4008 4.89473 35.4998C4.89473 34.019 5.25491 32.7984 6.21541 31.7378L7.29598 32.6783ZM13.4192 20.1913V20.2113C14.5998 21.2119 15.1801 22.9328 15.1801 24.4736C15.1801 27.5352 13.159 29.6763 10.0174 29.6763C7.03584 29.6763 4.89473 27.5352 4.89473 24.5536C4.89473 21.532 6.7557 19.2308 10.6978 19.611V28.0154C12.5187 27.8353 13.6593 26.3345 13.6593 24.4336C13.6593 23.313 13.2191 21.9523 12.4187 21.2919L13.4192 20.1913ZM9.31703 21.1718H9.33704C7.41604 21.2519 6.3755 22.5726 6.3755 24.5136C6.3755 26.2345 7.41604 27.7353 9.31703 28.0154V21.1718ZM4.63459 12.3913L4.61458 12.4314C1.65303 12.4113 0.772573 9.48982 0.772573 7.02853C0.772573 4.00695 2.25335 1.72576 4.73464 1.70575C6.17539 1.70575 7.41604 2.7463 7.75622 4.20706C8.13642 2.68627 9.41709 1.42561 10.9779 1.42561C13.7393 1.42561 15.1601 3.9069 15.1601 7.04854C15.1601 9.56986 14.2796 12.6315 11.178 12.6315V10.8905C13.2791 10.8705 13.5592 8.5093 13.5592 7.00852C13.5592 4.78736 12.6588 3.16652 11.0379 3.16652C9.85732 3.16652 8.53663 4.22707 8.53663 6.92848V9.18966H7.07586V7.04854C7.07586 4.88741 6.07534 3.44666 4.75465 3.42665C3.59405 3.40664 2.37341 4.4672 2.37341 7.00852C2.37341 8.5093 2.75361 10.6704 4.63459 10.6704V12.3913Z"
                        fill="black"
                      />
                    </motion.svg>
                  ) : (
                    <Image src={phase3} alt="Phase 1" />
                  )}
                </AnimatePresence>
              </div>
              {/* phase 3 */}

              {/* phase 4 */}
              <div
                className="absolute bottom-[3px] right-[210px] overflow-clip"
                onMouseEnter={() => setHovered("phase4")}
                onMouseLeave={() => setHovered("")}
              >
                <AnimatePresence mode="wait" initial={false}>
                  {hovered === "phase4" ? (
                    <motion.svg
                      key={0}
                      initial={{ y: "59.9%" }}
                      animate={{ y: 0 }}
                      exit={{ y: "59.9%" }}
                      transition={{ duration: 1 }}
                      width="15"
                      height="389"
                      viewBox="0 0 15 389"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M7.50391 389.005L7.50389 93.0052"
                        stroke="#8A8989"
                        stroke-width="2"
                      />
                      <rect
                        y="91.0052"
                        width="10.0052"
                        height="15.0078"
                        transform="rotate(-90 0 91.0052)"
                        fill="#8A8989"
                      />
                      <path
                        d="M9.47764 75.4181H14V77.139H-0.0073122L-0.0073122 70.7757C-0.0073122 64.3323 9.45763 64.3323 9.47764 70.7757V75.4181ZM7.85679 70.7757C7.85679 66.6536 1.61353 66.6536 1.61353 70.7757V75.4181H7.85679V70.7757ZM-0.0073122 62.1994H0.012698H5.7557C4.45502 61.3589 4.01479 60.0382 3.99478 58.7776C3.99478 55.9961 5.83574 54.6354 8.55716 54.6354H14V56.2563H8.57717C6.63616 56.2563 5.53558 57.2568 5.53558 59.0577C5.53558 60.8587 6.95632 62.1793 8.75726 62.1793H14V63.8202H-0.0073122L-0.0073122 62.1994ZM14 43.6184L14.04 43.6584L12.2391 43.6984C13.5998 44.4789 14.2401 45.9796 14.2401 47.3403C14.2401 50.1818 12.2791 52.403 9.05742 52.403C5.85575 52.403 3.93475 50.1418 3.95476 47.3203C3.95476 45.8396 4.63511 44.3788 5.91578 43.6584L4.11484 43.6384V42.0376H14V43.6184ZM5.49556 47.2403L5.51557 47.2603C5.51557 49.2213 6.9163 50.8022 9.11745 50.8022C11.3186 50.8022 12.7393 49.2213 12.7393 47.2603C12.7393 42.4978 5.49556 42.4978 5.49556 47.2403ZM6.29598 32.6783L6.31599 32.6983C5.53558 33.5588 5.35549 34.4593 5.35549 35.4798C5.33548 36.8405 5.81573 37.9411 6.79624 37.9211C7.81677 37.901 8.11693 36.7004 8.257 35.4598C8.47712 33.6588 8.8373 31.2576 11.2786 31.2976C13.2596 31.3376 14.2401 33.2186 14.2401 35.4398C14.2401 37.1006 13.7799 38.7415 12.3792 39.8621L11.2386 38.9216C12.3191 38.0411 12.7594 36.6204 12.7594 35.3997C12.7594 34.3192 12.4192 32.9385 11.2185 32.8984C10.138 32.8784 9.81782 34.039 9.63772 35.5598C9.3976 37.4608 8.89734 39.5019 6.79624 39.5019C4.69514 39.5219 3.87471 37.4008 3.89473 35.4998C3.89473 34.019 4.25491 32.7984 5.21541 31.7378L6.29598 32.6783ZM12.4192 20.1913V20.2113C13.5998 21.2119 14.1801 22.9328 14.1801 24.4736C14.1801 27.5352 12.159 29.6763 9.0174 29.6763C6.03584 29.6763 3.89473 27.5352 3.89473 24.5536C3.89473 21.532 5.7557 19.2308 9.69775 19.611V28.0154C11.5187 27.8353 12.6593 26.3345 12.6593 24.4336C12.6593 23.313 12.2191 21.9523 11.4187 21.2919L12.4192 20.1913ZM8.31703 21.1718H8.33704C6.41604 21.2519 5.3755 22.5726 5.3755 24.5136C5.3755 26.2345 6.41604 27.7353 8.31703 28.0154V21.1718ZM11.0585 4.8674V12.9516L9.13746 13.1917L-0.0073122 5.90795L-0.0073122 3.10648H9.43762V1.4056H11.0585V3.10648H14V4.8674H11.0585ZM9.43762 4.8674H1.31338L9.43762 11.3508V4.8674Z"
                        fill="black"
                      />
                    </motion.svg>
                  ) : (
                    <Image src={phase4} alt="Phase 1" />
                  )}
                </AnimatePresence>
              </div>
              {/* phase 4 */}

              {/* phase 5 */}
              <div
                className="absolute bottom-[20px] right-[100px] overflow-clip"
                onMouseEnter={() => setHovered("phase5")}
                onMouseLeave={() => setHovered("")}
              >
                <AnimatePresence mode="wait" initial={false}>
                  {hovered === "phase5" ? (
                    <motion.svg
                      key={0}
                      initial={{ y: "68%" }}
                      animate={{ y: 0 }}
                      exit={{ y: "68%" }}
                      transition={{ duration: 1 }}
                      width="15"
                      height="390"
                      viewBox="0 0 15 390"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M7.50391 390.005L7.50389 94.0052"
                        stroke="#8A8989"
                        stroke-width="2"
                      />
                      <rect
                        y="92.0052"
                        width="10.0052"
                        height="15.0078"
                        transform="rotate(-90 0 92.0052)"
                        fill="#8A8989"
                      />
                      <path
                        d="M9.47764 75.4181H14V77.139H-0.0073122L-0.0073122 70.7757C-0.0073122 64.3323 9.45763 64.3323 9.47764 70.7757V75.4181ZM7.85679 70.7757C7.85679 66.6536 1.61353 66.6536 1.61353 70.7757V75.4181H7.85679V70.7757ZM-0.0073122 62.1994H0.012698H5.7557C4.45502 61.3589 4.01479 60.0382 3.99478 58.7776C3.99478 55.9961 5.83574 54.6354 8.55716 54.6354H14V56.2563H8.57717C6.63616 56.2563 5.53558 57.2568 5.53558 59.0577C5.53558 60.8587 6.95632 62.1793 8.75726 62.1793H14V63.8202H-0.0073122L-0.0073122 62.1994ZM14 43.6184L14.04 43.6584L12.2391 43.6984C13.5998 44.4789 14.2401 45.9796 14.2401 47.3403C14.2401 50.1818 12.2791 52.403 9.05742 52.403C5.85575 52.403 3.93475 50.1418 3.95476 47.3203C3.95476 45.8396 4.63511 44.3788 5.91578 43.6584L4.11484 43.6384V42.0376H14V43.6184ZM5.49556 47.2403L5.51557 47.2603C5.51557 49.2213 6.9163 50.8022 9.11745 50.8022C11.3186 50.8022 12.7393 49.2213 12.7393 47.2603C12.7393 42.4978 5.49556 42.4978 5.49556 47.2403ZM6.29598 32.6783L6.31599 32.6983C5.53558 33.5588 5.35549 34.4593 5.35549 35.4798C5.33548 36.8405 5.81573 37.9411 6.79624 37.9211C7.81677 37.901 8.11693 36.7004 8.257 35.4598C8.47712 33.6588 8.8373 31.2576 11.2786 31.2976C13.2596 31.3376 14.2401 33.2186 14.2401 35.4398C14.2401 37.1006 13.7799 38.7415 12.3792 39.8621L11.2386 38.9216C12.3191 38.0411 12.7594 36.6204 12.7594 35.3997C12.7594 34.3192 12.4192 32.9385 11.2185 32.8984C10.138 32.8784 9.81782 34.039 9.63772 35.5598C9.3976 37.4608 8.89734 39.5019 6.79624 39.5019C4.69514 39.5219 3.87471 37.4008 3.89473 35.4998C3.89473 34.019 4.25491 32.7984 5.21541 31.7378L6.29598 32.6783ZM12.4192 20.1913V20.2113C13.5998 21.2119 14.1801 22.9328 14.1801 24.4736C14.1801 27.5352 12.159 29.6763 9.0174 29.6763C6.03584 29.6763 3.89473 27.5352 3.89473 24.5536C3.89473 21.532 5.7557 19.2308 9.69775 19.611V28.0154C11.5187 27.8353 12.6593 26.3345 12.6593 24.4336C12.6593 23.313 12.2191 21.9523 11.4187 21.2919L12.4192 20.1913ZM8.31703 21.1718H8.33704C6.41604 21.2519 5.3755 22.5726 5.3755 24.5136C5.3755 26.2345 6.41604 27.7353 8.31703 28.0154V21.1718ZM5.21541 6.80842C5.21541 3.40664 6.9163 1.48564 9.5977 1.48564C12.2991 1.48564 14.1201 3.62676 14.1201 6.92848C14.1201 9.70993 13.1596 12.4514 9.9779 12.4714V10.7305C12.019 10.7305 12.4792 8.58935 12.4792 6.9685C12.4792 4.74734 11.3986 3.22655 9.61771 3.22655C7.97686 3.22655 6.85627 4.44718 6.85627 6.80842V12.2112H-0.0073122L-0.0073122 2.28606H1.59352L1.59352 10.5103H5.21541V6.80842Z"
                        fill="black"
                      />
                    </motion.svg>
                  ) : (
                    <Image src={phase5} alt="Phase 1" />
                  )}
                </AnimatePresence>
              </div>
              {/* phase 5 */}
            </div>
          </motion.div>
          {/* for Desktop  */}

          {/* for Mobile  */}
          <motion.div
            initial={{ scale: 0 }}
            whileInView={{ scale: 1 }}
            viewport={{ once: true }}
            transition={{ duration: 0.3, delay: 0.6 }}
            className="flex sm:hidden flex-col  items-start justify-center min-h-[600px] pt-8 px-2 "
          >
            <div className="relative" onMouseLeave={() => setHovered("")}>
              <Image src={mobileOvalImage} alt="Road Map Oval" />

              {/* phase 1 */}
              <div
                className="absolute top-[80px] left-[24px] overflow-clip"
                onMouseEnter={() => setHovered("phase1")}
                onMouseLeave={() => setHovered("")}
              >
                <AnimatePresence mode="wait" initial={false}>
                  {hovered === "phase1" ? (
                    <motion.svg
                      key={0}
                      initial={{ x: "-70%" }}
                      animate={{ x: 0 }}
                      exit={{ x: "-70%" }}
                      transition={{ duration: 1 }}
                      width="280"
                      height="15"
                      viewBox="0 0 384 15"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M0 7.50391L296 7.50389"
                        stroke="#8A8989"
                        stroke-width="2"
                      />
                      <rect
                        x="298"
                        width="10.0052"
                        height="15.0078"
                        fill="#8A8989"
                      />
                      <path
                        d="M313.587 9.47764V14H311.866V-0.0073122L318.23 -0.0073122C324.673 -0.0073122 324.673 9.45763 318.23 9.47764H313.587ZM318.23 7.85679C322.352 7.85679 322.352 1.61353 318.23 1.61353L313.587 1.61353V7.85679H318.23ZM326.806 -0.0073122V0.012698V5.7557C327.646 4.45502 328.967 4.01479 330.228 3.99478C333.009 3.99478 334.37 5.83574 334.37 8.55716V14H332.749V8.57717C332.749 6.63616 331.748 5.53558 329.948 5.53558C328.147 5.53558 326.826 6.95632 326.826 8.75726V14H325.185V-0.0073122L326.806 -0.0073122ZM345.387 14L345.347 14.04L345.307 12.2391C344.526 13.5998 343.026 14.2401 341.665 14.2401C338.823 14.2401 336.602 12.2791 336.602 9.05742C336.602 5.85575 338.863 3.93475 341.685 3.95476C343.166 3.95476 344.626 4.63511 345.347 5.91578L345.367 4.11484H346.968V14H345.387ZM341.765 5.49556L341.745 5.51557C339.784 5.51557 338.203 6.9163 338.203 9.11745C338.203 11.3186 339.784 12.7393 341.745 12.7393C346.507 12.7393 346.507 5.49556 341.765 5.49556ZM356.327 6.29598L356.307 6.31599C355.446 5.53558 354.546 5.35549 353.525 5.35549C352.165 5.33548 351.064 5.81573 351.084 6.79624C351.104 7.81677 352.305 8.11693 353.545 8.257C355.346 8.47712 357.748 8.8373 357.708 11.2786C357.668 13.2596 355.787 14.2401 353.565 14.2401C351.905 14.2401 350.264 13.7799 349.143 12.3792L350.084 11.2386C350.964 12.3191 352.385 12.7594 353.606 12.7594C354.686 12.7594 356.067 12.4192 356.107 11.2185C356.127 10.138 354.966 9.81782 353.445 9.63772C351.544 9.3976 349.503 8.89734 349.503 6.79624C349.483 4.69514 351.604 3.87471 353.505 3.89473C354.986 3.89473 356.207 4.25491 357.267 5.21541L356.327 6.29598ZM368.814 12.4192H368.794C367.793 13.5998 366.072 14.1801 364.532 14.1801C361.47 14.1801 359.329 12.159 359.329 9.0174C359.329 6.03584 361.47 3.89473 364.452 3.89473C367.473 3.89473 369.774 5.7557 369.394 9.69775H360.99C361.17 11.5187 362.671 12.6593 364.572 12.6593C365.692 12.6593 367.053 12.2191 367.713 11.4187L368.814 12.4192ZM367.833 8.31703V8.33704C367.753 6.41604 366.433 5.3755 364.492 5.3755C362.771 5.3755 361.27 6.41604 360.99 8.31703H367.833ZM376.334 12.5392H378.935V2.17383L376.474 2.83417V1.23334L380.676 -0.0073122V12.5392H383.217V14H376.334V12.5392Z"
                        fill="black"
                      />
                    </motion.svg>
                  ) : (
                    <Image src={mobilePhase1} alt="Phase 1" />
                  )}
                </AnimatePresence>
              </div>
              {/* phase 1 */}

              {/* phase 2 */}
              <div
                className="absolute top-[170px] left-[9px] overflow-clip"
                onMouseEnter={() => setHovered("phase2")}
                onMouseLeave={() => setHovered("")}
              >
                <AnimatePresence mode="wait" initial={false}>
                  {hovered === "phase2" ? (
                    <motion.svg
                      key={0}
                      initial={{ x: "-63.6%" }}
                      animate={{ x: 0 }}
                      exit={{ x: "-63.6%" }}
                      transition={{ duration: 1 }}
                      width="280"
                      height="16"
                      viewBox="0 0 391 16"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M0.501343 8.00262L297.501 8.00261"
                        stroke="#8A8989"
                        stroke-width="2"
                      />
                      <rect
                        x="298.501"
                        y="0.498718"
                        width="10.0052"
                        height="15.0078"
                        fill="#8A8989"
                      />
                      <path
                        d="M315.088 9.97636V14.4987H313.368V0.491406L319.731 0.491406C326.174 0.491406 326.174 9.95635 319.731 9.97636H315.088ZM319.731 8.35551C323.853 8.35551 323.853 2.11225 319.731 2.11225H315.088V8.35551H319.731ZM328.307 0.491406V0.511416V6.25441C329.148 4.95374 330.468 4.51351 331.729 4.4935C334.51 4.4935 335.871 6.33446 335.871 9.05588V14.4987H334.25V9.07589C334.25 7.13487 333.25 6.0343 331.449 6.0343C329.648 6.0343 328.327 7.45504 328.327 9.25598V14.4987H326.686V0.491406H328.307ZM346.888 14.4987L346.848 14.5387L346.808 12.7378C346.028 14.0985 344.527 14.7388 343.166 14.7388C340.325 14.7388 338.104 12.7778 338.104 9.55614C338.104 6.35447 340.365 4.43346 343.186 4.45347C344.667 4.45347 346.128 5.13383 346.848 6.4145L346.868 4.61356H348.469V14.4987H346.888ZM343.266 5.99428L343.246 6.01429C341.285 6.01429 339.704 7.41502 339.704 9.61617C339.704 11.8173 341.285 13.2381 343.246 13.2381C348.009 13.2381 348.009 5.99428 343.266 5.99428ZM357.828 6.7947L357.808 6.81471C356.948 6.0343 356.047 5.85421 355.027 5.85421C353.666 5.8342 352.566 6.31445 352.586 7.29496C352.606 8.31549 353.806 8.61565 355.047 8.75572C356.848 8.97584 359.249 9.33602 359.209 11.7773C359.169 13.7583 357.288 14.7388 355.067 14.7388C353.406 14.7388 351.765 14.2786 350.645 12.8779L351.585 11.7373C352.465 12.8178 353.886 13.2581 355.107 13.2581C356.187 13.2581 357.568 12.9179 357.608 11.7173C357.628 10.6367 356.468 10.3165 354.947 10.1364C353.046 9.89632 351.005 9.39605 351.005 7.29496C350.985 5.19386 353.106 4.37343 355.007 4.39344C356.488 4.39344 357.708 4.75363 358.769 5.71413L357.828 6.7947ZM370.315 12.9179H370.295C369.295 14.0985 367.574 14.6788 366.033 14.6788C362.971 14.6788 360.83 12.6578 360.83 9.51612C360.83 6.53456 362.971 4.39344 365.953 4.39344C368.975 4.39344 371.276 6.25441 370.896 10.1965H362.491C362.671 12.0174 364.172 13.158 366.073 13.158C367.194 13.158 368.554 12.7178 369.215 11.9174L370.315 12.9179ZM369.335 8.81575V8.83576C369.255 6.91476 367.934 5.87422 365.993 5.87422C364.272 5.87422 362.771 6.91476 362.491 8.81575H369.335ZM379.896 4.37343H378.155C378.275 1.2518 381.117 0.331323 383.698 0.331323C386.3 0.331323 389.101 1.39188 389.101 4.51351C389.101 7.69517 386.32 8.69569 383.618 8.69569C381.977 8.7157 379.816 9.11591 379.816 11.117V12.8379H389.041V14.4987H378.055V11.117C378.055 7.9553 380.937 7.07484 383.598 7.07484C385.079 7.07484 387.38 6.55457 387.38 4.53352C387.38 2.49245 385.479 1.89214 383.698 1.85212C381.977 1.85212 379.916 2.45243 379.896 4.37343Z"
                        fill="black"
                      />
                    </motion.svg>
                  ) : (
                    <Image src={mobilePhase2} alt="Phase 1" />
                  )}
                </AnimatePresence>
              </div>
              {/* phase 2 */}

              {/* phase 3 */}
              <div
                className="absolute top-[260px] left-[3px] overflow-clip  "
                onMouseEnter={() => setHovered("phase3")}
                onMouseLeave={() => setHovered("")}
              >
                <AnimatePresence mode="wait" initial={false}>
                  {hovered === "phase3" ? (
                    <motion.svg
                      key={0}
                      initial={{ x: "-59.5%" }}
                      animate={{ x: 0 }}
                      exit={{ x: "-59.5%" }}
                      transition={{ duration: 1 }}
                      width="280"
                      height="16"
                      viewBox="0 0 391 16"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M0.501343 8.00262L296.501 8.00261"
                        stroke="#8A8989"
                        stroke-width="2"
                      />
                      <rect
                        x="298.501"
                        y="0.498718"
                        width="10.0052"
                        height="15.0078"
                        fill="#8A8989"
                      />
                      <path
                        d="M315.088 9.97636V14.4987H313.368V0.491406L319.731 0.491406C326.174 0.491406 326.174 9.95635 319.731 9.97636H315.088ZM319.731 8.35551C323.853 8.35551 323.853 2.11225 319.731 2.11225H315.088V8.35551H319.731ZM328.307 0.491406V0.511416V6.25441C329.148 4.95374 330.468 4.51351 331.729 4.4935C334.51 4.4935 335.871 6.33446 335.871 9.05588V14.4987H334.25V9.07589C334.25 7.13487 333.25 6.0343 331.449 6.0343C329.648 6.0343 328.327 7.45504 328.327 9.25598V14.4987H326.686V0.491406H328.307ZM346.888 14.4987L346.848 14.5387L346.808 12.7378C346.028 14.0985 344.527 14.7388 343.166 14.7388C340.325 14.7388 338.104 12.7778 338.104 9.55614C338.104 6.35447 340.365 4.43346 343.186 4.45347C344.667 4.45347 346.128 5.13383 346.848 6.4145L346.868 4.61356H348.469V14.4987H346.888ZM343.266 5.99428L343.246 6.01429C341.285 6.01429 339.704 7.41502 339.704 9.61617C339.704 11.8173 341.285 13.2381 343.246 13.2381C348.009 13.2381 348.009 5.99428 343.266 5.99428ZM357.828 6.7947L357.808 6.81471C356.948 6.0343 356.047 5.85421 355.027 5.85421C353.666 5.8342 352.566 6.31445 352.586 7.29496C352.606 8.31549 353.806 8.61565 355.047 8.75572C356.848 8.97584 359.249 9.33602 359.209 11.7773C359.169 13.7583 357.288 14.7388 355.067 14.7388C353.406 14.7388 351.765 14.2786 350.645 12.8779L351.585 11.7373C352.465 12.8178 353.886 13.2581 355.107 13.2581C356.187 13.2581 357.568 12.9179 357.608 11.7173C357.628 10.6367 356.468 10.3165 354.947 10.1364C353.046 9.89632 351.005 9.39605 351.005 7.29496C350.985 5.19386 353.106 4.37343 355.007 4.39344C356.488 4.39344 357.708 4.75363 358.769 5.71413L357.828 6.7947ZM370.315 12.9179H370.295C369.295 14.0985 367.574 14.6788 366.033 14.6788C362.971 14.6788 360.83 12.6578 360.83 9.51612C360.83 6.53456 362.971 4.39344 365.953 4.39344C368.975 4.39344 371.276 6.25441 370.896 10.1965H362.491C362.671 12.0174 364.172 13.158 366.073 13.158C367.194 13.158 368.554 12.7178 369.215 11.9174L370.315 12.9179ZM369.335 8.81575V8.83576C369.255 6.91476 367.934 5.87422 365.993 5.87422C364.272 5.87422 362.771 6.91476 362.491 8.81575H369.335ZM378.115 4.13331L378.075 4.1133C378.095 1.15175 381.017 0.271292 383.478 0.271292C386.5 0.271292 388.781 1.75206 388.801 4.23336C388.801 5.67411 387.76 6.91476 386.3 7.25494C387.82 7.63514 389.081 8.9158 389.081 10.4766C389.081 13.2381 386.6 14.6588 383.458 14.6588C380.937 14.6588 377.875 13.7783 377.875 10.6767H379.616C379.636 12.7778 381.997 13.058 383.498 13.058C385.719 13.058 387.34 12.1575 387.34 10.5366C387.34 9.35603 386.28 8.03534 383.578 8.03534H381.317V6.57458H383.458C385.619 6.57458 387.06 5.57406 387.08 4.25337C387.1 3.09276 386.039 1.87213 383.498 1.87213C381.997 1.87213 379.836 2.25233 379.836 4.13331H378.115Z"
                        fill="black"
                      />
                    </motion.svg>
                  ) : (
                    <Image src={mobilePhase3} alt="Phase 1" />
                  )}
                </AnimatePresence>
              </div>
              {/* phase 3 */}

              {/* phase 4 */}
              <div
                className="absolute bottom-[239px] left-[1px] overflow-clip"
                onMouseEnter={() => setHovered("phase4")}
                onMouseLeave={() => setHovered("")}
              >
                <AnimatePresence mode="wait" initial={false}>
                  {hovered === "phase4" ? (
                    <motion.svg
                      key={0}
                      initial={{ x: "-59.9%" }}
                      animate={{ x: 0 }}
                      exit={{ x: "-59.9%" }}
                      transition={{ duration: 1 }}
                      width="280"
                      height="15"
                      viewBox="0 0 389 15"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M0.00134277 7.50262L296.001 7.50261"
                        stroke="#8A8989"
                        stroke-width="2"
                      />
                      <rect
                        x="298.001"
                        y="-0.00128174"
                        width="10.0052"
                        height="15.0078"
                        fill="#8A8989"
                      />
                      <path
                        d="M313.588 9.47636V13.9987H311.868V-0.00859394L318.231 -0.00859394C324.674 -0.00859394 324.674 9.45635 318.231 9.47636H313.588ZM318.231 7.85551C322.353 7.85551 322.353 1.61225 318.231 1.61225L313.588 1.61225V7.85551H318.231ZM326.807 -0.00859394V0.0114162V5.75441C327.648 4.45374 328.968 4.01351 330.229 3.9935C333.01 3.9935 334.371 5.83446 334.371 8.55588V13.9987H332.75V8.57589C332.75 6.63487 331.75 5.5343 329.949 5.5343C328.148 5.5343 326.827 6.95504 326.827 8.75598V13.9987H325.186V-0.00859394L326.807 -0.00859394ZM345.388 13.9987L345.348 14.0387L345.308 12.2378C344.528 13.5985 343.027 14.2388 341.666 14.2388C338.825 14.2388 336.604 12.2778 336.604 9.05614C336.604 5.85447 338.865 3.93346 341.686 3.95347C343.167 3.95347 344.628 4.63383 345.348 5.9145L345.368 4.11356H346.969V13.9987H345.388ZM341.766 5.49428L341.746 5.51429C339.785 5.51429 338.204 6.91502 338.204 9.11617C338.204 11.3173 339.785 12.7381 341.746 12.7381C346.509 12.7381 346.509 5.49428 341.766 5.49428ZM356.328 6.2947L356.308 6.31471C355.448 5.5343 354.547 5.35421 353.527 5.35421C352.166 5.3342 351.066 5.81445 351.086 6.79496C351.106 7.81549 352.306 8.11565 353.547 8.25572C355.348 8.47584 357.749 8.83602 357.709 11.2773C357.669 13.2583 355.788 14.2388 353.567 14.2388C351.906 14.2388 350.265 13.7786 349.145 12.3779L350.085 11.2373C350.965 12.3178 352.386 12.7581 353.607 12.7581C354.687 12.7581 356.068 12.4179 356.108 11.2173C356.128 10.1367 354.968 9.81654 353.447 9.63644C351.546 9.39632 349.505 8.89605 349.505 6.79496C349.485 4.69386 351.606 3.87343 353.507 3.89344C354.988 3.89344 356.208 4.25363 357.269 5.21413L356.328 6.2947ZM368.815 12.4179H368.795C367.795 13.5985 366.074 14.1788 364.533 14.1788C361.471 14.1788 359.33 12.1578 359.33 9.01612C359.33 6.03456 361.471 3.89344 364.453 3.89344C367.475 3.89344 369.776 5.75441 369.396 9.69647H360.991C361.171 11.5174 362.672 12.658 364.573 12.658C365.694 12.658 367.054 12.2178 367.715 11.4174L368.815 12.4179ZM367.835 8.31575V8.33576C367.755 6.41476 366.434 5.37422 364.493 5.37422C362.772 5.37422 361.271 6.41476 360.991 8.31575H367.835ZM384.139 11.0572H376.055L375.815 9.13618L383.099 -0.00859394L385.9 -0.00859394V9.43634H387.601V11.0572H385.9V13.9987H384.139V11.0572ZM384.139 9.43634V1.3121L377.656 9.43634H384.139Z"
                        fill="black"
                      />
                    </motion.svg>
                  ) : (
                    <Image src={mobilePhase4} alt="Phase 1" />
                  )}
                </AnimatePresence>
              </div>
              {/* phase 4 */}

              {/* phase 5 */}
              <div
                className="absolute bottom-[130px] left-[12px] overflow-clip"
                onMouseEnter={() => setHovered("phase5")}
                onMouseLeave={() => setHovered("")}
              >
                <AnimatePresence mode="wait" initial={false}>
                  {hovered === "phase5" ? (
                    <motion.svg
                      key={0}
                      initial={{ x: "-68%" }}
                      animate={{ x: 0 }}
                      exit={{ x: "-68%" }}
                      transition={{ duration: 1 }}
                      width="280"
                      height="16"
                      viewBox="0 0 391 16"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M0.501343 8.00262L296.501 8.00261"
                        stroke="#8A8989"
                        stroke-width="2"
                      />
                      <rect
                        x="298.501"
                        y="0.498718"
                        width="10.0052"
                        height="15.0078"
                        fill="#8A8989"
                      />
                      <path
                        d="M315.088 9.97636V14.4987H313.368V0.491406L319.731 0.491406C326.174 0.491406 326.174 9.95635 319.731 9.97636H315.088ZM319.731 8.35551C323.853 8.35551 323.853 2.11225 319.731 2.11225H315.088V8.35551H319.731ZM328.307 0.491406V0.511416V6.25441C329.148 4.95374 330.468 4.51351 331.729 4.4935C334.51 4.4935 335.871 6.33446 335.871 9.05588V14.4987H334.25V9.07589C334.25 7.13487 333.25 6.0343 331.449 6.0343C329.648 6.0343 328.327 7.45504 328.327 9.25598V14.4987H326.686V0.491406H328.307ZM346.888 14.4987L346.848 14.5387L346.808 12.7378C346.028 14.0985 344.527 14.7388 343.166 14.7388C340.325 14.7388 338.104 12.7778 338.104 9.55614C338.104 6.35447 340.365 4.43346 343.186 4.45347C344.667 4.45347 346.128 5.13383 346.848 6.4145L346.868 4.61356H348.469V14.4987H346.888ZM343.266 5.99428L343.246 6.01429C341.285 6.01429 339.704 7.41502 339.704 9.61617C339.704 11.8173 341.285 13.2381 343.246 13.2381C348.009 13.2381 348.009 5.99428 343.266 5.99428ZM357.828 6.7947L357.808 6.81471C356.948 6.0343 356.047 5.85421 355.027 5.85421C353.666 5.8342 352.566 6.31445 352.586 7.29496C352.606 8.31549 353.806 8.61565 355.047 8.75572C356.848 8.97584 359.249 9.33602 359.209 11.7773C359.169 13.7583 357.288 14.7388 355.067 14.7388C353.406 14.7388 351.765 14.2786 350.645 12.8779L351.585 11.7373C352.465 12.8178 353.886 13.2581 355.107 13.2581C356.187 13.2581 357.568 12.9179 357.608 11.7173C357.628 10.6367 356.468 10.3165 354.947 10.1364C353.046 9.89632 351.005 9.39605 351.005 7.29496C350.985 5.19386 353.106 4.37343 355.007 4.39344C356.488 4.39344 357.708 4.75363 358.769 5.71413L357.828 6.7947ZM370.315 12.9179H370.295C369.295 14.0985 367.574 14.6788 366.033 14.6788C362.971 14.6788 360.83 12.6578 360.83 9.51612C360.83 6.53456 362.971 4.39344 365.953 4.39344C368.975 4.39344 371.276 6.25441 370.896 10.1965H362.491C362.671 12.0174 364.172 13.158 366.073 13.158C367.194 13.158 368.554 12.7178 369.215 11.9174L370.315 12.9179ZM369.335 8.81575V8.83576C369.255 6.91476 367.934 5.87422 365.993 5.87422C364.272 5.87422 362.771 6.91476 362.491 8.81575H369.335ZM383.698 5.71413C387.1 5.71413 389.021 7.41502 389.021 10.0964C389.021 12.7978 386.88 14.6188 383.578 14.6188C380.797 14.6188 378.055 13.6583 378.035 10.4766H379.776C379.776 12.5177 381.917 12.9779 383.538 12.9779C385.759 12.9779 387.28 11.8974 387.28 10.1164C387.28 8.47557 386.059 7.35499 383.698 7.35499H378.295V0.491406L388.221 0.491406V2.09224L379.996 2.09224V5.71413H383.698Z"
                        fill="black"
                      />
                    </motion.svg>
                  ) : (
                    <Image src={mobilePhase5} alt="Phase 1" />
                  )}
                </AnimatePresence>
              </div>
              {/* phase 5 */}
            </div>
          </motion.div>
          {/* for Mobile */}

          <div className="flex justify-center items-center max-sm:mt-12 px-4">
            {hovered === "phase1" ? (
              <div className="flex  justify-center flex-col sm:flex-row gap-4 sm:gap-14 w-full sm:w-[600px] ">
                <div>
                  <h2 className=" text-[#1A1C1F] text-5xl  m-0">01</h2>
                  <h2 className="text-[#1A1C1F] -mt-2 sm:text-center max-sm:ps-2">
                    Phase
                  </h2>
                </div>

                <div>
                  <p className="text-[#1A1C1F]  ">
                    - Set up core blockchain infrastructure.
                    <br />
                    - Establish TNET brand and organizational structure.
                    <br />
                    - Launch private network for internal testing.
                    <br />- Implement Proof-of-Work (PoW) ecosystem.
                  </p>
                </div>
              </div>
            ) : hovered === "phase2" ? (
              <div className="flex  justify-center flex-col sm:flex-row gap-4 sm:gap-14 w-full sm:w-[600px] ">
                <div>
                  <h2 className=" text-[#1A1C1F] text-5xl  m-0 ">02</h2>
                  <h2 className="text-[#1A1C1F] -mt-2 sm:text-center max-sm:ps-2 ">
                    Phase
                  </h2>
                </div>

                <div>
                  <p className="text-[#1A1C1F]  ">
                    - Deploy the TNET testnet for public testing.
                    <br />
                    - Introduce the TNET blockchain explorer.
                    <br />
                    - Form strategic partnerships to enhance the ecosystem.
                    <br />
                  </p>
                </div>
              </div>
            ) : hovered === "phase3" ? (
              <div className="flex  justify-center flex-col sm:flex-row gap-4 sm:gap-14 w-full sm:w-[600px] ">
                <div>
                  <h2 className=" text-[#1A1C1F] text-5xl  m-0 ">03</h2>
                  <h2 className="text-[#1A1C1F] -mt-2 sm:text-center max-sm:ps-2 ">
                    Phase
                  </h2>
                </div>

                <div>
                  <p className="text-[#1A1C1F]  ">
                    - Officially launch the TNET mainnet.
                    <br />
                    - Introduce staking and decentralized governance (DAO).
                    <br />
                    - Launch native decentralized exchange (DEX).
                    <br />- Enable EVM compatibility for smart contracts.
                  </p>
                </div>
              </div>
            ) : hovered === "phase4" ? (
              <div className="flex  justify-center flex-col sm:flex-row gap-4 sm:gap-14 w-full sm:w-[600px] ">
                <div>
                  <h2 className=" text-[#1A1C1F] text-5xl  m-0 ">04</h2>
                  <h2 className="text-[#1A1C1F] -mt-2 sm:text-center max-sm:ps-2 ">
                    Phase
                  </h2>
                </div>

                <div>
                  <p className="text-[#1A1C1F]  ">
                    - Expand into new markets to increase adoption.
                    <br />
                    - Achieve listings on major cryptocurrency exchanges.
                    <br />
                    - Enhance network security measures.
                    <br />
                  </p>
                </div>
              </div>
            ) : hovered === "phase5" ? (
              <div className="flex  justify-center flex-col sm:flex-row gap-4 sm:gap-14 w-full sm:w-[600px] ">
                <div>
                  <h2 className=" text-[#1A1C1F] text-5xl  m-0 ">05</h2>
                  <h2 className="text-[#1A1C1F] -mt-2 sm:text-center max-sm:ps-2 ">
                    Phase
                  </h2>
                </div>

                <div>
                  <p className="text-[#1A1C1F]  ">
                    - Regularly update and innovate to stay ahead in technology.
                    <br />- Engage with the community for feedback and
                    continuous improvement.
                  </p>
                </div>
              </div>
            ) : null}
          </div>
        </motion.div>

        <motion.h1
          initial={{ x: -200, opacity: 0 }}
          viewport={{ once: true }}
          whileInView={{ x: 0, opacity: 1 }}
          transition={{ duration: 0.4, delay: 0.4 }}
          style={{ textTransform: "uppercase" }}
          className="text-white text-4xl px-2 text-balance sm:text-5xl md:text-6xl mt-20 max-lg:text-center sm:leading-[68.4px]  "
        >
          Discover the unique features of
          <br className=" max-sm:hidden" /> our ecosystem
        </motion.h1>
      </div>
    </div>
  );
};

export default RoadMap;
